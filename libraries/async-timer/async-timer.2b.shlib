#!/bin/bash
# ============================================================================
# Основные настройки @async-timer.2b
_timerSleep=100				# Интервал отправки сигнала приложению (мс*10)
_timerSig=31				# Номер сигнала
_timerCallback=false			# Функция логирования
# ============================================================================
##

# Внутренние переменные
_timerPid=0; unset _timerPExec; unset _timerPTimer; unset _timerPCount
declare -A _timerPExec; declare -A _timerPTimer; declare -A _timerPCount

## Асинхронный таймер
##   timer [off|on callback]
##   options:
##     bind string int function		- добавить function для выполнения каждые int секунд с идентификатором string
##     unbind [string]			- Отчистить очередь функций или одну функцию если указан идентификатор string
##     on|start 			- Включить таймер
##     off|stop				- Выключить таймер
function timer() {
case $1 in
  "bind")
    if ! [[ "$2" =~ ^[_a-zA-Z0-9-]+$ ]]
      then $_timerCallback "Bad id for bind"; return; fi
    if ! [[ "$3" =~ ^[0-9]+$ ]]
      then $_timerCallback "Bad timing for bind"; return; fi
    if ! [[ "$4" =~ ^[_a-zA-Z0-9-]+$ ]]
      then $_timerCallback "Bad function for bind"; return; fi
    $_timerCallback "Binding $2 [$3] $4"
    _timerPTimer[$2]="$3"; _timerPExec[$2]="$4"
  ;;
  "unbind")
    if [[ "$2" =~ ^[_a-zA-Z0-9-]+$ ]]; then
      $_timerCallback "Unbinding $2"
      unset _timerPExec[$2]; unset _timerPCount[$2]; unset _timerPTimer[$2]
    else
      $_timerCallback "Unbinding all"
      _timerPExec=(); _timerPCount=(); _timerPTimer=()
    fi
  ;;
  "on"|"start")
    if [ 0$_timerPid -eq 0 ]; then shift
      $_timerCallback "Timer is ON"
      trap 'timer _worker' ${_timerSig}
      timer _thread $$ &
      _timerPid=$!
    fi
  ;;
  "off"|"stop")
    if [ $(timer _check) -gt 0 ]; then
      $_timerCallback "Try to stop timer-thread"
      kill -SIGINT $_timerPid
      sleep 0.5
      if [ $(timer _check) -gt 0 ]; then
        $_timerCallback "Try to kill timer-thread"
	kill -9 $_timerPid
	sleep 0.5
        if [ $(timer _check) -gt 0 ]; then
          $_timerCallback "Can't stop and kill timer-thread!"
        fi
      fi
      trap - ${_timerSig}
      _timerPid=0
    fi
  ;;
  "_worker")
    for current in ${!_timerPExec[*]}; do
      (( _timerPCount[$current]+=1 ))
      if [ 0${_timerPCount[$current]} -ge 0${_timerPTimer[$current]} ]; then
	[ "${_timerPExec[$current]}" != "" ] && ${_timerPExec[$current]}
	_timerPCount[$current]=0
      fi
    done
  ;;
  "_thread")
    $_timerCallback "Starting timer-thread"
    _timerDisable=false
    let _timerTSleep=$_timerSleep
    trap '_timerDisable=true' SIGINT
    
    if [[ $2 =~ ^[0-9]+ ]]; then
      while [ $(ps ax | grep -cE "[ ]*$2[ ]+") -ge 1 ] && ! $_timerDisable; do
        kill -${_timerSig} $2
	for _timerTi in {1..$_timerSleep}; do
	  sleep $_timerTSleep 0.01
          $_timerDisable && break
	done
      done
    fi
    $_timerCallback "Exiting timer-thread"
  ;;
  "_check") [ 0$_timerPid -gt 0 ] && echo $(ps ax | grep -cE "^[ ]*$_timerPid[ ]+") || echo -1;;
esac  
}