#!/bin/bash
##
# ==================================================================================
# Основные настройки
# ВНИМАНИЕ! Модуль использует прерывание SIGWINCH
_menuSkin=(0 14 0 14 0 7 0 0 14)	# Стандартное оформление
_menuSpaces="                         "	# Строка-заполнитель (влияет на ширину меню)
# ==================================================================================

## Типы цветов (офсеты $_menuSkin массива)
##   № (Тип)
##   0 (bg) фон
##   1 (hf) заголовок текст
##   2 (hb) заголовок фон
##   3 (ef) активный текст
##   4 (eb) активный фон
##   5 (df) неактивный текст
##   6 (db) неактивный фон
##   7 (sf) выбранный текст
##   8 (sb) выбранный фон
##
##  Цвета
##  № Цвет	|№  Цвет	|№ Цвет
##  0 Чёрный	|7  Серый	|14 Белый
##  1 Красный	|8  Коралловый	|
##  2 Зеленый	|9  Салатовый	|
##  3 Лимонный	|10 Желтый	|
##  4 Синий	|11 Фиолетовый	|
##  5 Малиновый	|12 Розовый	|
##  6 Бирюзовый	|13 Голубой	|
##

# Внутренние переменные
_menuHeader=(); _menuBufer=(); _menuPointer=0; _menuEnabled=false
_menuWin[0]=$(tput lines); _menuWin[1]=$(tput cols)
_menuShift=0

## Конфигурация меню
##   menuSet option
##   options:
##     color type int		- установить int цвет в type тип шаблона
##     header [@pos] "string"	- добавить строку заголовка или заменить в позиции @pos
##     spaces "string"		- установить строку-заполнитель
##     rsleep int		- установить паузу таймера обновления
##     shift int		- установить вертикальный сдвиг меню
##
function menuSet() {
local tmp
case "$1" in
  "color")
    if [ $3 -lt 0 -o $3 -gt 14 ]; then return; fi
    case $2 in
      "bg") _menuSkin[0]=$3;;
      "hf") _menuSkin[1]=$3;; "hb") _menuSkin[2]=$3;;
      "ef") _menuSkin[3]=$3;; "eb") _menuSkin[4]=$3;;
      "df") _menuSkin[5]=$3;; "db") _menuSkin[6]=$3;;
      "sf") _menuSkin[7]=$3;; "sb") _menuSkin[8]=$3;;
      *) return;;
    esac
  ;;
  "header")
    if [[ $2 =~ ^@[0-9]+$ ]]; then
      tmp=${2:1}; shift 2
      _menuHeader[$tmp]=$*
    else
      shift; _menuHeader[${#_menuHeader[@]}]=$*
    fi
  ;;
  "spaces") shift; _menuSpaces=$*;;
  "shift") if [[ $2 =~ ^[0-9]+$ ]]; then _menuShift=$2; fi;;
esac
}

## Добавить или заменить строку меню в буфере
##   menuAdd [@int] string
##   @int			- указатель на строку
##   string			- строка меню
##
function menuAdd() {
if [[ $1 =~ ^@[0-9]+$ ]]; then
  local tmp=${1:1}; shift
  _menuBufer[$tmp]="$*"
else
  _menuBufer[${#_menuBufer[@]}]="$*"
fi
}

## Отобразить меню, запуск таймера
##   menuShow
##
function menuShow() {
local x; local y; local i; local u
_menuWin[0]=$(tput lines); _menuWin[1]=$(tput cols)
if [ ${_menuSkin[0]} -lt 8 ]
  then let u=${_menuSkin[0]}+40
  else let u=${_menuSkin[0]}+93
fi
echo -ne "\e[${u}m\e[2J"

if [ ${#_menuHeader[@]} -gt 0 ]; then
  let x=${_menuWin[1]}/2-${#_menuSpaces}/2
  for (( ii=0; ii<${#_menuHeader[@]}; ii++)); do
    let y=${_menuWin[0]}/2-${#_menuBufer[@]}/2-${#_menuHeader[@]}/2+$i+$ii-$_menuShift
    _menuEcho f ${_menuSkin[1]} b ${_menuSkin[2]} x $x y $y "${_menuHeader[$ii]}"
  done
fi

let x=${_menuWin[1]}/2-${#_menuSpaces}/2
for (( i=0; i<${#_menuBufer[@]}; i++)); do
  let y=${_menuWin[0]}/2-${#_menuBufer[@]}/2-${#_menuHeader[@]}/2+$i+$ii-$_menuShift
  if [ "${_menuBufer[$i]:0:1}" == "#" ]; then u=true; else u=false; fi
if $u; then  
  _menuEcho f ${_menuSkin[5]} b ${_menuSkin[6]} x $x y $y "${_menuBufer[$i]:1}"
else
  if [ $i -eq $_menuPointer ]
    then _menuEcho f ${_menuSkin[7]} b ${_menuSkin[8]} x $x y $y "${_menuBufer[$i]}"
    else _menuEcho f ${_menuSkin[3]} b ${_menuSkin[4]} x $x y $y "${_menuBufer[$i]}"
  fi
fi
done

if ! ${_menuEnabled}; then
  trap "menuRefresh" SIGWINCH
  _menuEnabled=true
fi
echo -ne "\e[0;0f\e[0m"
}

## Навигация по меню
##   menuNavi option
##   options:
##     u|up			- указатель на строку выше
##     d|down			- указатель на строку ниже
##
function menuNavi() {
if $_menuEnabled; then
  local i; local ch=0
  if [ "$1" == "u" -o "$1" == "up" ]; then ch=-1; menuRefresh f; fi
  if [ "$1" == "d" -o "$1" == "down" ]; then ch=1; menuRefresh f; fi
  
  if [ $ch -ne 0 ]; then
    i=$_menuPointer
    while true ; do
      let i+=$ch
      if [ $i -lt 0 -o $i -ge ${#_menuBufer[@]} ]
      then menuRefresh; break
      else
        if [ ${_menuBufer[$i]:0:1} != "#" ]; then
          _menuPointer=$i; menuShow; break
        fi
      fi
    done
  fi
fi
}

## Получить текущий выбраный пункт
##   menuGet option
##   options:
##     n|name			- вернуть выбранную строку
##     i|id			- вернуть выбранную позицию
##
function menuGet() {
case $1 in
  "name"|"n") echo ${_menuBufer[$_menuPointer]};;
  "id"|"i") echo $_menuPointer;;
esac
}

## Обновить меню и подстроить при изменении ШхВ
##   menuRefresh option
##     f|full			- игнорировать ШхВ и обновить принудительно
##
function menuRefresh() {
if $_menuEnabled; then
  local h="$(tput lines)"; local w="$(tput cols)"
  if [ $h -ne ${_menuWin[0]} -o $w -ne ${_menuWin[1]} -o "$1"=="f" -o "$1"=="full" ]
    then menuShow; fi
fi
}

## Очистить буфер
##   menuClear option
##   options:
##     header			- очистка буфера заголовка
##     bufer			- очистка буфера меню и экрана, остановка таймера
##     ""			- очистка всех буферов (завершение работы)
##
function menuClear() {
if [ "$1" == "" ]; then
  menuClear header; menuClear bufer
else
  case "$1" in
    "header") _menuHeader=();;
    "bufer") _menuBufer=(); _menuPointer=0; _menuEnabled=false
             trap - SIGWINCH    
	     sleep 0.2; echo -ne "\e[0m\e[2J"; clear;;
  esac
fi
}

# Вспомогательные функции
function _menuEcho() {
local cB=-1; local cF=-1; local cX=-1; local cY=-1
local trigger=true; clr=""; local tmp=""; local regex='^[ ]*$'
while $trigger; do
  if [[ $2 =~ ^[0-9]+$ ]]; then
    case $1 in
      "f"|"fore") if [ $2 -lt 8 ]; then let cF=$2+30; else let cF=$2+83; fi; shift 2;;
      "b"|"back") if [ $2 -lt 8 ]; then let cB=$2+40; else let cB=$2+93; fi; shift 2;;
      "x") cX=$2; shift 2;; "y") cY=$2; shift 2;; *)trigger=false;;
    esac
  else
    trigger=false
  fi
done

if [ $cX -ge 0 -a $cY -ge 0 ]; then echo -ne "\e[${cY};${cX}f"; fi
clr="\e["
  if [ $cF -ge 0 ]; then clr+="$cF"; fi
  if [ $cF -ge 0 -a $cB -ge 0 ]; then clr+=";"; fi
  if [ $cB -ge 0 ]; then clr+="$cB"; fi
clr+="m"

tmp="$*"
echo -ne "${clr}"
echo -n "${tmp}${_menuSpaces:${#tmp}}"
echo -ne "\e[0m"
}